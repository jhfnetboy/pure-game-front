{"version":3,"sources":["hooks/useWalker.ts","hooks/useNetwork.ts","App.tsx","reportWebVitals.js","index.js"],"names":["require","config","Walker","localAddress","useWalker","web3","useState","address","setAddress","useEffect","detectNetwork","then","network","address_","name","fetchWalker","walkerID","a","contract","ethers","Contract","abi","tokenWalkerName","data","console","log","setWalkerName","walkerName","Error","signer","getSigner","_setTokenName","transaction","wait","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","process","REACT_APP_INFURA_ID","web3Modal","Web3Modal","cacheProvider","useNetwork","provider","setProvider","setWeb3","connect","provider_","web3_","providers","Web3Provider","disconnect","close","clearCachedProvider","undefined","handleNetwork","App","setNetwork","account","setAccount","walker","setWalker","appMsg","setAppMsg","inputElm","useRef","document","createElement","initFields","setNetworkAccount","catch","showAppMsg","listAccounts","accounts","err","message","setTimeout","handleConnect","handleFetch","i","txtList","className","id","onClick","scroll1","getElementById","innerText","play","style","display","scroll","icon","faDog","color","size","mintWalker","current","value","ref","placeholder","chainId","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.a9bc0ef3.chunk.js","sourcesContent":["import { ethers, providers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nrequire('dotenv').config();\n// const PRIVATE_KEY = process.env.PRIVATE_KEY;\n// const CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS;\n// const WALLET_ADDRESS = process.env.WALLET_ADDRESS;\nconst Walker = require('../artifacts/contracts/Walker.sol/Walker.json');\n\nconst localAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"\n// const ropstenAddress = \"0xAf0eDf79D9bb4cC0481ddC0e157c906Fc5384FB8\"\nconst CONTRACT_ADDRESS = \"0x238e289247CD6122EdCd65216A9b8bE4e8f963BA\"\n\nconst contractAddress = (networkName: string) => {\n//   return networkName === \"ropsten\" ? CONTRACT_ADDRESS : localAddress\n    return networkName === \"maticmum\" ? CONTRACT_ADDRESS : localAddress\n}\n\ntype Props = {\n  web3: providers.Web3Provider | undefined\n}\n\nfunction useWalker({ web3 }: Props) {\n  const [address, setAddress] = useState<string>(localAddress)\n\n  useEffect(() => {\n    web3?.detectNetwork().then((network) => {\n      const address_ = contractAddress(network.name)\n      setAddress(address_)\n    })\n  }, [web3])\n\n  const fetchWalker = async (walkerID: number) => {\n    if (typeof web3 === \"undefined\") return\n\n    const contract = new ethers.Contract(address, Walker.abi, web3)\n\n    try {\n      const data = await contract.tokenWalkerName(walkerID)\n      console.log(\"data: \", data)\n      return data\n    } catch (err) {\n      console.log(\"Error: \", err)\n      throw err\n    }\n  }\n\n  const setWalkerName = async (walkerID: number, walkerName: string) => {\n    if (typeof web3 === \"undefined\") return\n    if (!setWalkerName) throw new Error(\"Record Empty\")\n\n    const signer = web3.getSigner()\n    const contract = new ethers.Contract(address, Walker.abi, signer)\n    const transaction = await contract._setTokenName(walkerID, walkerName)\n    await transaction.wait()\n  }\n\n  return [fetchWalker, setWalkerName] as const\n}\n\nexport default useWalker\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { providers } from \"ethers\";\nimport { useState } from \"react\";\nimport Web3Modal from \"web3modal\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: process.env.REACT_APP_INFURA_ID,\n    }\n  }\n}\n\nconst web3Modal = new Web3Modal({\n  // network: \"ropsten\",\n  cacheProvider: false,\n  providerOptions\n})\n\nfunction useNetwork() {\n  const [provider, setProvider] = useState<any>()\n  const [web3, setWeb3] = useState<providers.Web3Provider>()\n\n  const connect = async () => {\n    const provider_ = await web3Modal.connect()\n    setProvider(provider_)\n\n    const web3_ = new providers.Web3Provider(provider_)\n    setWeb3(web3_)\n  }\n\n  const disconnect = async () => {\n    // explicitly close when wallet connect is used\n    if (provider && provider.close) {\n      await provider.close()\n    }\n    web3Modal.clearCachedProvider()\n\n    setProvider(undefined)\n    setWeb3(undefined)\n  }\n\n  const handleNetwork = async () => {\n    if (typeof web3 === \"undefined\") {\n      await connect()\n    } else {\n      await disconnect()\n    }\n  }\n\n  return [{ web3 }, handleNetwork] as const\n}\n\nexport default useNetwork\n","import './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faDog } from '@fortawesome/free-solid-svg-icons'\n\nimport { providers } from 'ethers';\n// import { Provider } from '@ethersproject/providers'\nimport React, { useEffect, useRef, useState } from 'react';\n// import useGreeter from './hooks/useGreeter';\nimport useWalker from './hooks/useWalker';\nimport useNetwork from './hooks/useNetwork';\n\n// function App(): JSX.Element {\nfunction App(){  \n      // wallet connect\n      const [network, setNetwork] = useState<providers.Network>()\n      const [account, setAccount] = useState<string>()\n      const [walker, setWalker] = useState<string>()\n      const [appMsg, setAppMsg] = useState<string>()\n      const inputElm = useRef<HTMLInputElement>(document.createElement(\"input\"))\n      const walkerID = 1\n      const [{ web3 }, handleNetwork] = useNetwork()\n      const [tokenWalkerName, _setTokenName] = useWalker({ web3 })\n\n      useEffect(() => {\n        if (typeof web3 === \"undefined\") {\n          initFields()\n        } else {\n          const setNetworkAccount = async () => {\n            web3.detectNetwork().then(setNetwork)\n              .catch(showAppMsg)\n            web3.listAccounts().then(accounts => {\n              setAccount(accounts[0])\n            }).catch(showAppMsg)\n          }\n          setNetworkAccount()\n        }\n      }, [web3])\n\n      const initFields = () => {\n        setNetwork(undefined)\n        setAccount(undefined)\n        setWalker(undefined)\n      }\n\n      const showAppMsg = (err: any) => {\n        console.log(err)\n        setAppMsg(err.message || `${err}`)\n        setTimeout(() => setAppMsg(undefined), 7000)\n      }\n\n      const handleConnect = async () => {\n        handleNetwork().catch(showAppMsg)\n      }\n\n      const handleFetch = async () => {\n        tokenWalkerName(walkerID).then(setWalker).catch(showAppMsg)\n      }\n\n      const handleSet = () => {\n        console.log(\"set here\")\n        _setTokenName(walkerID, inputElm.current.value)\n          .then(() => {\n            inputElm.current.value = \"\"\n            handleFetch()\n          })\n          .catch(showAppMsg)\n      }\n      //end wallet func\n\n    //begin mint func\n    async function mintWalker() {\n      console.log(walkerID)\n    } \n    //end mint func\n\n    \n    //begin scroll function\n    let i = 0\n    const txtList = [\"My dog has been robbed by Cerberus？\", \"Oh my poor doggy!  I must save him in this weekend!\", \"So you carring on your umbrella and dog leash, down to the cellar.\", \"A adventure is beginging...\"]\n    function scroll(){\n      const scroll1 = document.getElementById('scroll')\n      if (i<4 && scroll1){\n        console.log(i)\n          scroll1.innerText = txtList[i] ? txtList[i] : ''\n        i = i +1\n      } else{\n        console.log('start')\n        if(scroll1){\n          scroll1.innerText =\"\"\n        }\n        const play = document.getElementById('create')\n        if (play){\n          play.style.display = 'inline';\n        }\n        \n      }\n\n    }\n    // end scroll func\n\n    // return result\n    return (\n            <div className=\"flex flex-col h-screen items-start overflow-x-hidden bg-custom-background\">\n                <header className=\"App-header\">\n                <div id=\"scroll\" onClick={() => {scroll()}}>  What the hell? </div>\n                 \n                <div id=\"create\" className=\"ml-20 \" style={{display: 'none'}}>\n                    <div className=\"text-white bg-custom-black py-1 px-2 text-2xl\" >\n                              <h3>Create your player, rescue your dog!</h3><br/>  \n                              <FontAwesomeIcon\n                                              icon={faDog}\n                                              className=\"mt-80 ml-200 text-center\"\n                                              color=\"white\"\n                                              size=\"4x\"\n                                              onClick={() => {mintWalker()}}\n                                          />\n                                          <br/><br/>          \n                 \n                </div>\n                </div>\n                <div className=\"text-white bg-custom-black py-1 px-2 text-xl\">\n                  <button onClick={handleConnect}>{web3 ? \"Disconnect\" : \"Connect\"}</button><br />\n                  <button onClick={handleFetch}>Fetch My Player info</button><br />\n                  <button onClick={handleSet}>Set New Name</button>\n                  <input ref={inputElm} placeholder=\"reSet My Player Name\" /><br />\n                  <hr />\n                  <div>\n                  Network: {network?.chainId} {network?.name}<br />\n                  Account: {account}<br />\n                  WalkerName: {walker}<br />\n                  StatusMessage: {appMsg}<br />\n                  </div>\n                </div>\n                <i>Test using Matic TestNet, 80001</i>\n                </header> \n            </div>\n    )//end return\n}//end app func\n\nexport default App","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}