{"version":3,"sources":["hooks/useWalker.ts","hooks/useNetwork.ts","App.tsx","reportWebVitals.js","index.js"],"names":["require","config","Walker","localAddress","useWalker","web3","useState","address","setAddress","useEffect","detectNetwork","then","network","address_","name","fetchWalkerName","walkerID","a","contract","ethers","Contract","abi","tokenWalkerName","data","console","log","setWalkerName","walkerName","Error","signer","getSigner","_setTokenName","transaction","wait","mintWalker","mint_address","mint","getNftCount","wallet_address","balanceOf","count","parseInt","providerOptions","walletconnect","package","WalletConnectProvider","options","infuraId","process","REACT_APP_INFURA_ID","web3Modal","Web3Modal","cacheProvider","useNetwork","provider","setProvider","setWeb3","connect","provider_","web3_","providers","Web3Provider","disconnect","close","clearCachedProvider","undefined","handleNetwork","event","App","setNetwork","account","setAccount","notifyTitle","setTitle","descriptionContent","setDes","adv","setAdv","nftCount","setNftCount","walker","setWalker","appMsg","setAppMsg","inputElm","useRef","document","createElement","initFields","setNetworkAccount","catch","showAppMsg","listAccounts","accounts","err","message","setTimeout","handleConnect","handleFetch","handleFetchCount","handleNotify","notification","description","handleSet","current","value","i","txtList","clearQlist","txt1","getElementById","txt2","txt3","innerText","selectChoice","num","choiceTxt","toString","result","Math","floor","random","answers","className","id","cat","icon","faRandom","color","size","title","onClick","choiceTxt1","choiceTxt2","choiceTxt3","choices","clickNext","ref","placeholder","chainId","scroll1","play","style","display","scroll","faDog","bigtext","handleMint","type","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.59cc6ae6.chunk.js","sourcesContent":["import { ethers, providers } from \"ethers\";\nimport { useEffect, useState } from \"react\";\nrequire('dotenv').config();\n// const PRIVATE_KEY = process.env.PRIVATE_KEY;\n// const CONTRACT_ADDRESS = process.env.CONTRACT_ADDRESS;\n// const WALLET_ADDRESS = process.env.WALLET_ADDRESS;\nconst Walker = require('../artifacts/contracts/Walker.sol/Walker.json');\n\nconst localAddress = \"0x5FbDB2315678afecb367f032d93F642f64180aa3\"\n// const ropstenAddress = \"0xAf0eDf79D9bb4cC0481ddC0e157c906Fc5384FB8\"\nconst CONTRACT_ADDRESS = \"0x238e289247CD6122EdCd65216A9b8bE4e8f963BA\"\n\nconst contractAddress = (networkName: string) => {\n//   return networkName === \"ropsten\" ? CONTRACT_ADDRESS : localAddress\n    return networkName === \"maticmum\" ? CONTRACT_ADDRESS : localAddress\n}\n\ntype Props = {\n  web3: providers.Web3Provider | undefined\n}\n\nfunction useWalker({ web3 }: Props) {\n  const [address, setAddress] = useState<string>(localAddress)\n\n  useEffect(() => {\n    web3?.detectNetwork().then((network) => {\n      const address_ = contractAddress(network.name)\n      setAddress(address_)\n    })\n  }, [web3])\n\n  const fetchWalkerName = async (walkerID: number) => {\n    if (typeof web3 === \"undefined\") return\n\n    const contract = new ethers.Contract(address, Walker.abi, web3)\n\n    try {\n      const data = await contract.tokenWalkerName(walkerID)\n      console.log(\"data: \", data)\n      return data\n    } catch (err) {\n      console.log(\"Error: \", err)\n      throw err\n    }\n  }\n\n  const setWalkerName = async (walkerID: number, walkerName: string) => {\n    if (typeof web3 === \"undefined\") return\n    if (!setWalkerName) throw new Error(\"Record Empty\")\n\n    const signer = web3.getSigner()\n    const contract = new ethers.Contract(address, Walker.abi, signer)\n    const transaction = await contract._setTokenName(walkerID, walkerName)\n    await transaction.wait()\n  }\n\n  const mintWalker = async (mint_address: string, walkerName: string) => {\n    if (typeof web3 === \"undefined\") return\n    if (!setWalkerName) throw new Error(\"Record Empty\")\n\n    const signer = web3.getSigner()\n    const contract = new ethers.Contract(address, Walker.abi, signer)\n    const transaction = await contract.mint(mint_address, walkerName)\n    await transaction.wait()\n  }\n\n  const getNftCount = async (wallet_address: string) => {\n    if (typeof web3 === \"undefined\") return\n    if (!setWalkerName) throw new Error(\"Record Empty\")\n\n    const signer = web3.getSigner()\n    const contract = new ethers.Contract(address, Walker.abi, signer)\n    const count = await contract.balanceOf(wallet_address)\n    console.log(count)\n    // await count.wait()\n    return parseInt(count,16)\n  }  \n\n  return [fetchWalkerName, setWalkerName, mintWalker, getNftCount] as const\n}\n\nexport default useWalker\n","import WalletConnectProvider from \"@walletconnect/web3-provider\";\nimport { providers } from \"ethers\";\nimport { useState } from \"react\";\nimport Web3Modal from \"web3modal\";\n\nconst providerOptions = {\n  walletconnect: {\n    package: WalletConnectProvider,\n    options: {\n      infuraId: process.env.REACT_APP_INFURA_ID,\n    }\n  }\n}\n\nconst web3Modal = new Web3Modal({\n  // network: \"ropsten\",\n  cacheProvider: false,\n  providerOptions\n})\n\nfunction useNetwork() {\n  const [provider, setProvider] = useState<any>()\n  const [web3, setWeb3] = useState<providers.Web3Provider>()\n\n  const connect = async () => {\n    const provider_ = await web3Modal.connect()\n    setProvider(provider_)\n\n    const web3_ = new providers.Web3Provider(provider_)\n    setWeb3(web3_)\n  }\n\n  const disconnect = async () => {\n    // explicitly close when wallet connect is used\n    if (provider && provider.close) {\n      await provider.close()\n    }\n    web3Modal.clearCachedProvider()\n\n    setProvider(undefined)\n    setWeb3(undefined)\n  }\n\n  const handleNetwork = async () => {\n    if (typeof web3 === \"undefined\") {\n      await connect()\n    } else {\n      await disconnect()\n    }\n  }\n\n  return [{ web3 }, handleNetwork] as const\n}\n\nexport default useNetwork\n","import 'antd/dist/antd.css';\nimport './App.css';\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome'\nimport { faDog } from '@fortawesome/free-solid-svg-icons'\nimport { faRandom } from '@fortawesome/free-solid-svg-icons'\nimport { providers } from 'ethers';\nimport React, { useEffect, useRef, useState } from 'react';\nimport useWalker from './hooks/useWalker';\nimport useNetwork from './hooks/useNetwork';\nimport { notification,Button } from 'antd';\nconst event = require('./local-storage/event.json')\nconst battleEvent = require('./local-storage/battle-event.json')\n// import Routes from './routes'\n// import { Router } from 'react-router';\n\n// function App(): JSX.Element {\nfunction App(){  \n      // wallet connect\n      const [network, setNetwork] = useState<providers.Network>()\n      const [account, setAccount] = useState<string>()\n      const [notifyTitle, setTitle] = useState<string>()\n      const [descriptionContent, setDes] = useState<string>()\n      const [adv, setAdv] = useState<string>()\n      const [nftCount, setNftCount] = useState<number>()\n      const [walker, setWalker] = useState<string>()\n      const [appMsg, setAppMsg] = useState<string>()\n      const inputElm = useRef<HTMLInputElement>(document.createElement(\"input\"))\n      const walkerID = 2\n      const [{ web3 }, handleNetwork] = useNetwork()\n      const [fetchWalkerName, setWalkerName, mintWalker, getNftCount] = useWalker({ web3 })\n\n      useEffect(() => {\n        if (typeof web3 === \"undefined\") {\n          initFields()\n        } else {\n          const setNetworkAccount = async () => {\n            web3.detectNetwork().then(setNetwork)\n              .catch(showAppMsg)\n            web3.listAccounts().then(accounts => {\n              setAccount(accounts[0])\n            }).catch(showAppMsg)\n          }\n          setNetworkAccount()\n        }\n      }, [web3])\n\n      const initFields = () => {\n        setNetwork(undefined)\n        setAccount(undefined)\n        setWalker(undefined)\n        setNftCount(undefined)\n        setTitle('Title')\n        setDes('Content')\n      }\n\n      const showAppMsg = (err: any) => {\n        console.log(err)\n        setAppMsg(err.message || `${err}`)\n        setTimeout(() => setAppMsg(undefined), 7000)\n      }\n\n      const handleConnect = async () => {\n        handleNetwork().catch(showAppMsg)\n      }\n\n      const handleFetch = async () => {\n        fetchWalkerName(walkerID).then(setWalker).catch(showAppMsg)\n      }\n\n      const handleFetchCount = async () => {\n        if(account){\n          getNftCount(account).then(setNftCount).catch(showAppMsg)\n        }\n      }      \n\n    \n      const handleTestClick = () => {\n        console.log(\"test click\")\n        const title = \"Test\"\n        const descriptionContent = \"Wow~\"\n        notification['info']({\n          message: title,\n          description:\n            descriptionContent,\n        });\n      };\n\n\n      const handleNotify = () => {\n        console.log(\"notify\")\n        notification['info']({\n          message: notifyTitle,\n          description:\n            descriptionContent,\n        });\n      };      \n\n\n      const handleSet = () => {\n        console.log(\"set here\")\n        setWalkerName(walkerID, inputElm.current.value)\n          .then(() => {\n            inputElm.current.value = \"\"\n            handleFetch()\n          })\n          .catch(showAppMsg)\n      }\n      //end wallet func\n\n      const handleMint = () => {\n        console.log(\"mint here\")\n        if(!network||!account){\n          setTitle(\"Network not ready!\")\n          setDes(\"Connect the web3 first with bottom tool\")\n          console.log(\"Connect the web3 first\")\n          handleNotify()\n        }\n        if(nftCount&&nftCount>0){\n          console.log(\"Boy, you have got the ticket to the hell,GO!\")\n          const bigtext = document.getElementById(\"bigtext\")\n          bigtext ? bigtext.innerText= \"Boy, you have got the ticket to the hell,GO!\" :console.log(\"error\")\n          setAdv('now')\n          return null\n        }\n        if(account && inputElm.current.value){\n          console.log(inputElm.current.value)\n          mintWalker(account, inputElm.current.value)\n          .then(() => {\n            inputElm.current.value = \"\"\n            handleFetch()\n          })\n          .catch(showAppMsg)\n        }\n        else{\n          console.log(\"mint to address or walkerName is empty!\")\n        }\n      }\n    // mintwalker\n    \n    //begin scroll function\n    let i = 0\n    const txtList = [\"My dog has been robbed by Cerberus？\", \"Oh my poor doggy!  I must save him in this weekend!\", \"So you carring on your umbrella and dog leash, down to the cellar.\", \"A adventure is beginging...\"]\n    function scroll(){\n      const scroll1 = document.getElementById('scroll')\n      if (i<4 && scroll1){\n        // console.log(i)\n          scroll1.innerText = txtList[i] ? txtList[i] : ''\n        i = i +1\n      } else{\n        console.log('start')\n        if(scroll1){\n          scroll1.innerText =\"\"\n        }\n        const play = document.getElementById('create')\n        if (play){\n          play.style.display = 'inline';\n        }\n        \n      }\n\n    }\n    // end scroll func\n\n\n    //adventure function list\n    function clearQlist(count: number){\n      if(count!==1){//check is A\n          const txt1 = document.getElementById(\"choice1\")\n          const txt2 = document.getElementById(\"choice2\")\n          const txt3 = document.getElementById(\"choice3\")\n          if(txt1){\n              txt1.innerText='' \n          }    \n          if(txt2){\n              txt2.innerText='' \n          }    \n          if(txt3){\n              txt3.innerText='' \n          }     \n          // console.log('clear Q1,2,3: '+count.toString()) \n      }              \n\n  }\n  function selectChoice(num: number){\n      const choiceTxt = document.getElementById(\"choice\"+num.toString())\n      const txt1 = document.getElementById(\"choice1\")\n      const txt2 = document.getElementById(\"choice2\")\n      const txt3 = document.getElementById(\"choice3\")\n      // console.log('click : '+num.toString())\n      let count =3\n      txt1 ? (txt1.innerText==='' ? count= count-1:count = count+0) :count=count+0   \n      txt2 ? (txt2.innerText==='' ? count= count-1:count = count+0) :count=count+0   \n      txt3 ? (txt3.innerText==='' ? count= count-1:count = count+0) :count=count+0   \n      // console.log('txt count: '+count.toString())      \n      clearQlist(count)    \n      let result = null\n      if(count===3){\n          switch (num) {\n              case 1:\n                  clearQlist(2)\n                  choiceTxt ? result = (choiceTxt.innerText = 'A1: '+event.data[Math.floor((Math.random()*10))].answers['f']) : result = null\n                  // console.log('txt count: '+count.toString())   \n                  return result\n              case 2:\n                  clearQlist(2)\n                  choiceTxt ? result = (choiceTxt.innerText = 'A2: '+event.data[Math.floor((Math.random()*10))].answers['s']) : result = null\n                  return result\n              case 3:\n                  clearQlist(2)\n                  choiceTxt ? result = (choiceTxt.innerText = 'A3: '+event.data[Math.floor((Math.random()*10))].answers['t'] ) : result = null   \n                  return result\n              default :\n                  return result                                      \n          }            \n      }   \n      return false     \n  }\n  //Q1,2,3 refresh, must be false\n  function clickNext(){\n      const choiceTxt1 = document.getElementById(\"choice1\")\n      const choiceTxt2 = document.getElementById(\"choice2\")\n      const choiceTxt3 = document.getElementById(\"choice3\")\n      // let serror = false\n      // console.log('clickNetxt')\n          choiceTxt1 ?   choiceTxt1.innerText = 'Q1: '+event.data[Math.floor((Math.random()*10))].choices['f'] : console.log('Q1 be clicked')\n          choiceTxt2 ?   choiceTxt2.innerText = 'Q2: '+event.data[Math.floor((Math.random()*10))].choices['t'] : console.log('Q2 be clicked')\n          choiceTxt3 ?   choiceTxt3.innerText = 'Q3: '+event.data[Math.floor((Math.random()*10))].choices['t'] : console.log('Q3 be clicked')\n      \n  } \n    //end adventure func\n\n\n    // return result\n    if(adv){\n      return (\n        <div className=\"flex flex-col h-screen items-start overflow-x-hidden bg-custom-background\">\n        <header className=\"App-header\">\n        <div className=\"text-white ml-40 mr-40 text-xl font-bold border-8 border-white\" id=\"stage\">\n        It is a test of stage, click your choice!<br/>\n        cat: {event.cat}||| id: {event.id}\n        <FontAwesomeIcon\n                    icon={faRandom}\n                    className=\"mt-1 ml-40\"\n                    color=\"red\"\n                    size=\"1x\"\n                    title=\"Begin! Rescue you dog!\"\n                    // forwardedRef=\"\"\n                    onClick={() => {clickNext()}}\n                /> \n        <hr/>\n        <div >\n            <div className=\"text-blue mt-1 ml-0\" id=\"choice1\"\n            onClick={() => {selectChoice(1)}}\n            >1.{event.data[0].choices['f']}</div>\n            <div className=\"text-red mt-1 ml-0\" id=\"choice2\"\n            onClick={() => {selectChoice(2)}}\n            >2.{event.data[0].choices['s']}</div>\n            <div className=\"text-white mt-1 ml-0\" id=\"choice3\"\n            onClick={() => {selectChoice(3)}}\n            >3.{event.data[0].choices['t']}</div>\n        </div>\n        <br/>\n      </div>\n      </header>\n      --------------------------------\n            <div className=\"text-white bg-custom-black py-1 px-2 text-xl\">\n              <button onClick={handleConnect}>{web3 ? \"Disconnect\" : \"Connect\"}</button><br />\n              <button onClick={handleFetch}>Fetch My Player info</button><br />\n              <button onClick={handleSet}>Set New Name</button>\n              <input ref={inputElm} placeholder=\"reSet My Player Name\" /><br />\n              <button onClick={handleFetchCount}>get My NFT count</button><br />\n              <hr />\n              <div>\n              Network: {network?.chainId} {network?.name}<br />\n              Account: {account}<br />\n              WalkerName: {walker}<br />\n              StatusMessage: {appMsg}<br />\n              Has NFTs: {nftCount}<br />\n              </div>\n            </div>\n            <i>Test using Matic TestNet, 80001</i>      \n    </div>\n      )\n    } else{\n      return (\n        <div className=\"flex flex-col h-screen items-start overflow-x-hidden bg-custom-background\">\n          <div>\n            <header className=\"App-header\">\n            <div id=\"scroll\" onClick={() => {scroll()}}>  What the hell? </div>\n            \n\n            <div id=\"create\" className=\"ml-20 \" style={{display: 'none'}}>\n                <div className=\"text-white bg-custom-black py-1 px-2 text-2xl\" >\n                          <h3 id=\"bigtext\">Create your player, rescue your dog!</h3><br/>  \n                          <FontAwesomeIcon\n                                          icon={faDog}\n                                          className=\"mt-80 ml-200 text-center cursor-pointer\"\n                                          color=\"white\"\n                                          size=\"4x\"\n                                          onClick={() => {handleMint()}}\n                                          // onMouseOver={()=>this.cursor=hand}\n                                      />\n                                      {/* <Router><Routes /></Router> */}\n                                      \n                </div>\n            </div>\n            </header>\n            </div>\n            --------------------------------\n            <div className=\"text-white bg-custom-black py-1 px-2 text-xl\">\n              <button onClick={handleConnect}>{web3 ? \"Disconnect\" : \"Connect\"}</button><br />\n              <button onClick={handleFetch}>Fetch My Player info</button><br />\n              <button onClick={handleSet}>Set New Name</button>\n              <input ref={inputElm} placeholder=\"reSet My Player Name\" /><br />\n              <button onClick={handleFetchCount}>get My NFT count</button><br />\n              <Button type=\"primary\" onClick={handleNotify}>Test Button</Button>\n              {/* <Button type=\"primary\" onClick={window.location.href='map.tsx'}>Test Button</Button> */}\n              <hr />\n              <div>\n              Network: {network?.chainId} {network?.name}<br />\n              Account: {account}<br />\n              WalkerName: {walker}<br />\n              StatusMessage: {appMsg}<br />\n              Has NFTs: {nftCount}<br />\n              </div>\n            </div>\n            <i>Test using Matic TestNet, 80001</i>\n             \n        </div>\n      )//end return\n    }\n    \n}//end app func\n\nexport default App\n\n// http://localhost:8080/pure-game-front/\n// https://mumbai.polygonscan.com/tx/0xe8dd990bcf5ab215c50c2eaef77956406b119373c2596eadb31aeb5272de9cdc","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n// import { BrowserRouter as Router } from 'react-router-dom'\n\nReactDOM.render(\n  <React.StrictMode>\n  {/* <Router> */}\n     <App />\n  {/* </Router> */}\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}